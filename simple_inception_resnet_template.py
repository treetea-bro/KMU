# -*- coding: utf-8 -*-
"""simple_inception-resnet_template.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NdRncd4a6Ekq49i7h3qY2O8Zvq-_548L
"""

from tqdm import tqdm

import torch
import torch.nn as nn

import torchvision.transforms as T
from torchvision.datasets import CIFAR100


def accuracy(model, loader):
    with torch.no_grad():
        total, correct = 0, 0
        for img, target in loader:
            img = img.cuda()
            target = target.cuda()

            logits = model(img)
            _, preds = torch.max(logits.data, 1)

            total += target.size(0)
            correct += (preds == target).sum().item()
        return 100 * correct / total


EPOCH = 400
BATCH_SIZE = 128

train_transform = T.Compose(
    [
        T.RandomHorizontalFlip(),
        T.RandomCrop(size=32, padding=4),
        T.ToTensor(),
        T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)),
    ]
)
test_transform = T.Compose(
    [
        T.ToTensor(),
        T.Normalize((0.5071, 0.4867, 0.4408), (0.2675, 0.2565, 0.2761)),
    ]
)

train = CIFAR100(
    "./", train=True, download=True, transform=train_transform
)  # 3 x 32 x 32
test = CIFAR100("./", train=False, download=True, transform=test_transform)

train_loader = torch.utils.data.DataLoader(
    train, batch_size=BATCH_SIZE, num_workers=8, shuffle=True
)
test_loader = torch.utils.data.DataLoader(test, batch_size=BATCH_SIZE, num_workers=2)


class Stem(nn.Module):
    def __init__(self):
        super(Stem, self).__init__()

        in_channel = 3
        out_channel = 128

        self.conv1 = nn.Conv2d(in_channel, 32, kernel_size=3, stride=2, padding=1)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1)
        self.conv5 = nn.Conv2d(64, out_channel, kernel_size=3, stride=1, padding=1)

        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.conv3(x)
        x = self.conv4(x)
        out = self.conv5(x)

        return self.relu(out)


class IR_A(nn.Module):
    def __init__(self):
        super(IR_A, self).__init__()

        in_channel = 128
        out_channel = 128

        self.conv1 = nn.Conv2d(in_channel, 32, kernel_size=1, stride=1, padding=0)

        self.conv2_1 = nn.Conv2d(in_channel, 32, kernel_size=1, stride=1, padding=0)
        self.conv2_2 = nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1)

        self.conv3_1 = nn.Conv2d(in_channel, 32, kernel_size=1, stride=1, padding=0)
        self.conv3_2 = nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1)
        self.conv3_3 = nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1)

        self.last_conv = nn.Conv2d(
            32 + 32 + 32, out_channel, kernel_size=1, stride=1, padding=0
        )

        self.bn = nn.BatchNorm2d(out_channel)

        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        out1 = self.conv1(x)

        out2 = self.conv2_1(x)
        out2 = self.conv2_2(out2)

        out3 = self.conv3_1(x)
        out3 = self.conv3_2(out3)
        out3 = self.conv3_3(out3)

        out = torch.concat((out1, out2, out3), dim=1)
        out = self.bn(self.last_conv(out))

        out = out + x

        return self.relu(out)


class RE_A(nn.Module):
    def __init__(self):
        super(RE_A, self).__init__()

        in_channel = 128
        out_channel = 320

        self.conv1 = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)

        self.conv2_1 = nn.Conv2d(in_channel, 96, kernel_size=3, stride=2, padding=1)

        self.conv3_1 = nn.Conv2d(in_channel, 96, kernel_size=1, stride=1, padding=0)
        self.conv3_2 = nn.Conv2d(96, 96, kernel_size=3, stride=1, padding=1)
        self.conv3_3 = nn.Conv2d(96, 96, kernel_size=3, stride=2, padding=1)

        self.bn = nn.BatchNorm2d(96)

        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        x1 = self.conv1(x)

        x2 = self.conv2_1(x)

        x3 = self.conv3_1(x)
        x3 = self.conv3_2(x3)
        x3 = self.bn(self.conv3_3(x3))

        out = torch.concat((x1, x2, x3), dim=1)

        return self.relu(out)


class IR_B(nn.Module):
    def __init__(self):
        super(IR_B, self).__init__()

        in_channel = 320
        out_channel = 320

        self.conv1 = nn.Conv2d(in_channel, 192, kernel_size=1, stride=1, padding=0)

        self.conv2_1 = nn.Conv2d(in_channel, 192, kernel_size=1, stride=1, padding=0)
        self.conv2_2 = nn.Conv2d(192, 192, kernel_size=3, stride=1, padding=1)
        self.conv2_3 = nn.Conv2d(192, 192, kernel_size=(3, 1), stride=1, padding=(1, 0))
        self.conv2_4 = nn.Conv2d(192, 192, kernel_size=(3, 1), stride=1, padding=(1, 0))

        self.last_conv = nn.Conv2d(
            192 + 192, out_channel, kernel_size=1, stride=1, padding=0
        )

        self.bn = nn.BatchNorm2d(out_channel)

        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        x1 = self.conv1(x)

        x2 = self.conv2_1(x)
        x2 = self.conv2_2(x2)
        x2 = self.conv2_3(x2)
        x2 = self.conv2_4(x2)

        out = torch.concat((x1, x2), dim=1)
        out = self.bn(self.last_conv(out))

        out = out + x

        return self.relu(out)


class RE_B(nn.Module):
    def __init__(self):
        super(RE_B, self).__init__()

        in_channel = 320
        out_channel = 704

        self.conv1 = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)

        self.conv2_1 = nn.Conv2d(in_channel, 96, kernel_size=1, stride=1, padding=0)
        self.conv2_2 = nn.Conv2d(96, 128, kernel_size=3, stride=1, padding=1)

        self.conv3_1 = nn.Conv2d(in_channel, 96, kernel_size=1, stride=1, padding=0)
        self.conv3_2 = nn.Conv2d(96, 192, kernel_size=3, stride=2, padding=1)

        self.conv4_1 = nn.Conv2d(in_channel, 96, kernel_size=1, stride=1, padding=0)
        self.conv4_2 = nn.Conv2d(96, 128, kernel_size=3, stride=2, padding=1)
        self.conv4_3 = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1)

        self.bn1 = nn.BatchNorm2d(192)
        self.bn2 = nn.BatchNorm2d(128)

        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        x1 = self.conv1(x)

        x2 = self.conv2_1(x)
        x2 = self.conv2_2(x2)

        x3 = self.conv3_1(x)
        x3 = self.bn1(self.conv3_2(x3))

        x4 = self.conv4_1(x)
        x4 = self.conv4_2(x4)
        x4 = self.bn2(self.conv4_3(x4))

        out = torch.concat((x1, x2, x3, x4), dim=1)

        return self.relu(out)


class IR_C(nn.Module):
    def __init__(self):
        super(IR_C, self).__init__()

        in_channel = 704
        out_channel = 768

        self.conv1 = nn.Conv2d(in_channel, 256, kernel_size=1, stride=1, padding=0)

        self.conv2_1 = nn.Conv2d(in_channel, 256, kernel_size=1, stride=1, padding=0)
        self.conv2_2 = nn.Conv2d(256, 256, kernel_size=(1, 3), stride=1, padding=(0, 1))
        self.conv2_3 = nn.Conv2d(256, 256, kernel_size=(3, 1), stride=1, padding=(1, 0))

        self.last_conv = nn.Conv2d(
            256 + 256, out_channel, kernel_size=1, stride=1, padding=0
        )

        self.bn = nn.BatchNorm2d(out_channel)

        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        x1 = self.conv1(x)

        x2 = self.conv2_1(x)
        x2 = self.conv2_2(x2)
        x2 = self.conv2_3(x2)
        x2 = self.conv2_4(x2)

        out = torch.concat((x1, x2), dim=1)
        out = self.bn(self.last_conv(out))

        out = out + x

        return self.relu(out)


class InceptionResnet(nn.Module):
    def __init__(self, channel_size, block_cnt=[2, 3, 2], num_classes=100):
        super(InceptionResnet, self).__init__()
        self.stem = Stem()
        self.ir_a = IR_A()
        self.re_a = RE_A()
        self.ir_b = IR_B()
        self.re_b = RE_B()
        self.ir_c = IR_C()

        self.avg_pool2d = nn.AvgPool2d(kernel_size=3, stride=1, padding=1)

        self.fnn = nn.Linear(768, 100)

    def forward(self, x):
        x = self.stem(x)
        x = self.ir_a(x)
        x = self.re_a(x)
        x = self.ir_b(x)
        x = self.re_b(x)
        x = self.ir_c(x)

        x = self.avg_pool2d(x)

        return torch.flatten(x)


model = InceptionResnet(3, 100).cuda()

loss_function = torch.nn.CrossEntropyLoss().cuda()
optimizer = torch.optim.Adam(model.parameters(), lr=0.01, weight_decay=1e-5)
scheduler = torch.optim.lr_scheduler.MultiStepLR(
    optimizer, milestones=[60, 120, 180, 300], gamma=0.5
)

for epoch in range(EPOCH):
    model.train()
    for img, target in tqdm(train_loader, leave=False, total=len(train_loader)):
        img = img.cuda()
        target = target.cuda()

        logit = model(img)

        optimizer.zero_grad()

        loss = loss_function(logit, target)

        loss.backward()
        optimizer.step()

    if (epoch + 1) % 50 == 0:
        model.eval()
        train_acc = accuracy(model, train_loader)
        test_acc = accuracy(model, test_loader)
        print(f"{epoch + 1} epoch: {loss.item()} / {train_acc}, {test_acc}")

    scheduler.step()

model.eval()

train_acc = accuracy(model, train_loader)
test_acc = accuracy(model, test_loader)

print(train_acc, test_acc)
